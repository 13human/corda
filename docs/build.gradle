apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlin'

dokka {
    moduleName = 'corda'
    outputDirectory = file("$rootDir/docs/build/html/api/kotlin")
    processConfigurations = ['compile']
    sourceDirs = files(
        "$rootDir/core/src/main/kotlin",
        "$rootDir/client/jfx/src/main/kotlin",
        "$rootDir/client/mock/src/main/kotlin",
        "$rootDir/client/rpc/src/main/kotlin",
        "$rootDir/node/src/main/kotlin",
        "$rootDir/finance/src/main/kotlin",
        "$rootDir/client/jackson/src/main/kotlin"
    )
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    moduleName = 'corda'
    outputFormat = "javadoc"
    outputDirectory = file("$rootDir/docs/build/html/api/javadoc")
    processConfigurations = ['compile']
    sourceDirs = files(
        "$rootDir/core/src/main/kotlin",
        "$rootDir/client/jfx/src/main/kotlin",
        "$rootDir/client/mock/src/main/kotlin",
        "$rootDir/client/rpc/src/main/kotlin",
        "$rootDir/node/src/main/kotlin",
        "$rootDir/finance/src/main/kotlin",
        "$rootDir/client/jackson/src/main/kotlin"
    )
}

task buildDocs(dependsOn: ['apidocs', 'makeDocs'])
task apidocs(dependsOn: ['dokka', 'dokkaJavadoc'])

task makeDocs(type: Exec, dependsOn: ['installDocsiteRequirements']) {
    // TODO: Non-msys Windows script
    commandLine 'cmd', '/c', 'sh make-docsite.sh' // Windows
    commandLine 'sh', './make-docsite.sh' // Linux
}

task installDocsiteRequirements(type: Exec) {
    // TODO: Non-msys Windows script
    commandLine 'cmd', '/c', 'sh install-docsite-requirements.sh' // Windows
    commandLine 'sh', './install-docsite-requirements.sh' // Linux
}

apidocs.shouldRunAfter makeDocs